/* global co */
'use strict';

/*

Exploit description

1. Hacker creates account with victim's email address
2. Victim logs in with oauth
3. Account becomes verified, hacker has password

Solution

If OAuth is used by an unverified_email account, account becomes verified
but password resets and sessions are deleted

*/

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (user, oauth_key, oauth_token) {
      return co(_regenerator2.default.mark(function _callee() {
            return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                        switch (_context.prev = _context.next) {
                              case 0:
                                    if (!(user.get(oauth_key) !== oauth_token)) {
                                          _context.next = 5;
                                          break;
                                    }

                                    // Set correctly
                                    user.set(oauth_key, oauth_token);

                                    // If user's email is unverified, exploit might happen
                                    if (!user.get('email_verified')) {

                                          user.set('password', null);
                                          user.set('sessions', {});
                                    }

                                    _context.next = 5;
                                    return user.updateRecord();

                              case 5:
                              case 'end':
                                    return _context.stop();
                        }
                  }
            }, _callee, this);
      }));
};